// lib/screens/preview_screen.dart

import 'package:flutter/material.dart';
import '../../models/entry_data.dart';
import '../../services/local_db.dart';
import '../../services/telegram_service.dart';
import '../../services/draft_service.dart';
import '../../services/quick_note_service.dart';
import '../../services/place_service.dart';
import '../../main.dart';
import '../../utils/wellbeing_utils.dart';
import '../flow_diary/date_time_screen.dart';
import '../history_diary/entries_screen.dart';
import '../history_diary/entry_detail_screen.dart';

enum _DateMenu { entries, toggleTheme }

const _moodLabels = <int, String>{
  1: '–£–∂–∞—Å–Ω–æ',
  2: '–£–∂–∞—Å–Ω–æ',
  3: '–ì—Ä—É—Å—Ç—å',
  4: '–ì—Ä—É—Å—Ç—å',
  5: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
  6: '–ß—É—Ç—å –ª—É—á—à–µ',
  7: '–ö–ª–∞—Å—Å–Ω–æ',
  8: '–ö–ª–∞—Å—Å–Ω–æ',
  9: '–í–æ—Å—Ç–æ—Ä–≥',
  10: '–í–æ—Å—Ç–æ—Ä–≥',
};

String _formatMood(String mood) {
  final rating = int.tryParse(mood);
  if (rating == null) return mood;
  final label = _moodLabels[rating];
  return label != null ? '$rating ‚Äì $label' : mood;
}

class PreviewScreen extends StatelessWidget {
  static const routeName = '/preview';
  const PreviewScreen({Key? key}) : super(key: key);

  Future<void> _send(EntryData e, BuildContext ctx) async {
    // 1) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
    await LocalDb.saveOrUpdate(e);
    if (e.place.trim().isNotEmpty) {
      await PlaceService.savePlace(e.place.trim());
    }

    // 2) –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    final ok = await TelegramService.sendEntry(e);

    // 3) –§–∏–¥–±—ç–∫
    ScaffoldMessenger.of(ctx).showSnackBar(
      SnackBar(
        content: Text(
          ok
            ? '–ó–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!'
            : '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∑–∂–µ'
        ),
      ),
    );

    // 4) –ü–∞—É–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç
    await Future.delayed(const Duration(milliseconds: 300));
    Navigator.pushNamedAndRemoveUntil(
      ctx,
      DateTimeScreen.routeName,
      (_) => false,
    );

    // 5) –û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
    await DraftService.clearDraft();
    await QuickNoteService.clearForDate(e.date);
  }

  Future<void> _save(EntryData e, BuildContext ctx) async {
    await LocalDb.saveOrUpdate(e);
    if (e.place.trim().isNotEmpty) {
      await PlaceService.savePlace(e.place.trim());
    }
    ScaffoldMessenger.of(ctx)
        .showSnackBar(const SnackBar(content: Text('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')));
    await DraftService.clearDraft();
    await QuickNoteService.clearForDate(e.date);
    Navigator.pushNamedAndRemoveUntil(
      ctx,
      EntryDetailScreen.routeName,
          (_) => false,
      arguments: e,
    );
  }

  @override
  Widget build(BuildContext context) {
    final entry = ModalRoute.of(context)!.settings.arguments as EntryData;
    final appState = MyApp.of(context);

    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: const Text('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', style: TextStyle(fontSize: 16)),
        actions: [
          PopupMenuButton<_DateMenu>(
            onSelected: (item) {
              switch (item) {
                case _DateMenu.entries:
                  Navigator.pushNamed(context, EntriesScreen.routeName);
                  break;
                case _DateMenu.toggleTheme:
                  appState.toggleTheme(!appState.isDark);
                  break;
              }
            },
            itemBuilder: (_) => [
              const PopupMenuItem(
                value: _DateMenu.entries,
                child: ListTile(
                  leading: Icon(Icons.list),
                  title: Text('–ú–æ–∏ –∑–∞–ø–∏—Å–∏'),
                ),
              ),
              PopupMenuItem(
                value: _DateMenu.toggleTheme,
                child: ListTile(
                  leading: Icon(
                    appState.isDark
                      ? Icons.sunny
                      : Icons.nightlight_round
                  ),
                  title: Text(
                    appState.isDark
                      ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞'
                      : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞'
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          children: [
            Expanded(
              child: ListView(
                children: [
                  Text(
                    'üìÖ –î–∞—Ç–∞: ${entry.date}',
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                  Text(
                    'üïó –°–æ–∑–¥–∞–Ω–æ: ${entry.createdAtFormatted}',
                    style: Theme.of(context).textTheme.bodySmall,
                  ),
                  if (entry.place.isNotEmpty)
                    Text('üìç –ú–µ—Å—Ç–æ: ${entry.place}'),
                  const Divider(),
                  ..._buildDetailLines(entry),
                ],
              ),
            ),
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                OutlinedButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('‚Üê –ù–∞–∑–∞–¥'),
                ),
                if (entry.localId == null)
                  ElevatedButton.icon(
                    icon: const Icon(Icons.send),
                    label: const Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'),
                    onPressed: () => _send(entry, context),
                  )
                else
                  ElevatedButton.icon(
                    icon: const Icon(Icons.save),
                    label: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                    onPressed: () => _save(entry, context),
                  ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  List<Widget> _buildDetailLines(EntryData e) => [
        Text('üìä –û—Ü–µ–Ω–∫–∞: ${e.rating} ‚Äì ${e.ratingReason}'),
        const SizedBox(height: 8),
        Text('üò¥ –°–æ–Ω: ${e.bedTime} ‚Üí ${e.wakeTime}'),
        Text('‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${e.sleepDuration}'),
        Text('üö∂ –®–∞–≥–∏: ${e.steps}'),
        Text('üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${e.activity}'),
        Text('‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: ${e.energy}'),
        Text('ü§í –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: ${WellBeingUtils.format(e.wellBeing)}'),
        const Divider(),
        Text('üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${_formatMood(e.mood)}'),
        Text('üé≠ –≠–º–æ—Ü–∏–∏: ${e.mainEmotions}'),
        Text('üí≠ –í–ª–∏—è–Ω–∏–µ: ${e.influence}'),
        const Divider(),
        Text('‚úÖ –í–∞–∂–Ω–æ–≥–æ: ${e.important}'),
        Text('üìå –ó–∞–¥–∞—á–∏: ${e.tasks}'),
        Text('‚è≥ –ù–µ —É—Å–ø–µ–ª: ${e.notDone}'),
        Text('üí° –ú—ã—Å–ª—å: ${e.thought}'),
        const Divider(),
        Text('üìñ –†–∞–∑–≤–∏—Ç–∏–µ: ${e.development}'),
        Text('üí™ –ö–∞—á–µ—Å—Ç–≤–∞: ${e.qualities}'),
        Text('üéØ –£–ª—É—á—à–∏—Ç—å: ${e.growthImprove}'),
        const Divider(),
        Text('üåü –ü—Ä–∏—è—Ç–Ω–æ–µ: ${e.pleasant}'),
        Text('üöÄ –£–ª—É—á—à–∏—Ç—å –∑–∞–≤—Ç—Ä–∞: ${e.tomorrowImprove}'),
        Text('üéØ –®–∞–≥ –∫ —Ü–µ–ª–∏: ${e.stepGoal}'),
        const Divider(),
        Text('üí¨ –ü–æ—Ç–æ–∫ –º—ã—Å–ª–∏:', style: TextStyle(fontSize: 16)),
        Text(e.flow),
      ];
}
