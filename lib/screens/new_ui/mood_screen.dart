import 'package:flutter/material.dart';
import '../../models/entry_data.dart';
import '../../services/draft_service.dart';
import '../../services/quick_note_service.dart';
import '../../theme/dark_diary_theme.dart';
import 'achievements_screen_new.dart';
import '../../widgets/diary_menu_button.dart';
import '../../widgets/keyboard_safe_content.dart';

class MoodScreenNew extends StatefulWidget {
  static const routeName = '/mood-new';
  const MoodScreenNew({Key? key}) : super(key: key);

  @override
  State<MoodScreenNew> createState() => _MoodScreenNewState();
}

class _MoodScreenNewState extends State<MoodScreenNew> {
  late EntryData entry;
  bool _inited = false;
  int _rating = 5;
  String _emoji = 'üòê';
  int? _expanded;
  final Set<String> _selected = <String>{};
  final Map<String, TextEditingController> _influenceCtrls = {};
  late TextEditingController _moodCtrl;
  Map<String, List<QuickNote>> _notes = {};

  static const _emojiCycle = ['üò©', 'üòê', 'ü§©'];
  static const _emojiOptions = ['üò©', 'üòî', 'üòê', 'üòä', 'ü§©'];

  String _emojiFromRating(int rating) {
      if (rating <= 3) return 'üò©';
      if (rating <= 7) return 'üòê';
      return 'ü§©';
    }
  static const Map<int, String> _ratingLabels = {
    0: '–ö—Ä–∏–∑–∏—Å',
    1: '–ë–µ–∑–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å',
    2: '–£–Ω—ã–Ω–∏–µ',
    3: '–¢—Ä–µ–≤–æ–≥–∞',
    4: '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
    5: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
    6: '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
    7: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ',
    8: '–û–ø—Ç–∏–º–∏–∑–º',
    9: '–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ',
    10: '–≠–π—Ñ–æ—Ä–∏—è',
  };

  static const Map<String, List<String>> _emotionCategories = {
    'üòÑ –†–∞–¥–æ—Å—Ç—å': [
      '–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ',
      '–í–æ—Å—Ç–æ—Ä–≥',
      '–ò–Ω—Ç–µ—Ä–µ—Å',
      '–†–∞–¥–æ—Å—Ç—å',
      '–°—á–∞—Å—Ç—å–µ',
      '–õ—ë–≥–∫–æ—Å—Ç—å',
      '–¢–µ–ø–ª–æ—Ç–∞',
      '–õ—é–±–æ–≤—å',
      '–û–±–æ–∂–∞–Ω–∏–µ',
    ],
    'üòî –ì—Ä—É—Å—Ç—å': [
      '–ü–µ—á–∞–ª—å',
      '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ',
      '–£–Ω—ã–Ω–∏–µ',
      '–ü–æ—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å',
      '–ë–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç—å',
      '–ù–æ—Å—Ç–∞–ª—å–≥–∏—è',
      '–¢–æ—Å–∫–∞',
      '–≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—Å–∫–∞',
      '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—è',
    ],
    'üò∞ –¢—Ä–µ–≤–æ–≥–∞': [
      '–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ',
      '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
      '–ü–∞–Ω–∏–∫–∞',
      '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
      '–ü—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–∞',
      '–¢—Ä–µ–≤–æ–≥–∞',
      '–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å',
      '–¢—Ä–µ–ø–µ—Ç',
    ],
    'üò° –ó–ª–æ—Å—Ç—å': [
      '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ',
      '–û–±–∏–¥–∞',
      '–ó–∞–≤–∏—Å—Ç—å',
      '–ê–≥—Ä–µ—Å—Å–∏—è',
      '–ù–µ–ø—Ä–∏—è–∑–Ω—å',
      '–§—Ä—É—Å—Ç—Ä–∞—Ü–∏—è',
      '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ',
    ],
    'üò∂ –û—Ü–µ–ø–µ–Ω–µ–Ω–∏–µ': [
      '–ü—É—Å—Ç–æ—Ç–∞',
      '–ó–∞–º–µ—Ä–∑–∞–Ω–∏–µ',
      '–û–Ω–µ–º–µ–Ω–∏–µ',
      '–¢—É–ø–∏–∫',
      '–•—Ç–æ–Ω—å',
    ],
    'ü§ç –ü—Ä–∏–Ω—è—Ç–∏–µ': [
      '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
      '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å',
      '–ü—Ä–∏–Ω—è—Ç–∏–µ',
      '–î–æ–≤–µ—Ä–∏–µ',
      '–†–µ–∑–æ–Ω–∞–Ω—Å',
    ],
    'üí≠ –°–ª–æ–∂–Ω—ã–µ/—Å–º–µ—à–∞–Ω–Ω—ã–µ': [
      '–í–∏–Ω–∞',
      '–°—Ç—ã–¥',
      '–°–º—É—â–µ–Ω–∏–µ',
      '–ù–µ–ª–æ–≤–∫–æ—Å—Ç—å',
      '–ê–º–±–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å',
      '–£—è–∑–≤–∏–º–æ—Å—Ç—å',
      '–ö–∞—Ç–∞—Ä—Å–∏—Å',
    ],
  };

  static const Map<String, String> _emotionHints = {
    '–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ': '–¢—ã –≤–∏–¥–∏—à—å —Ü–µ–ª—å –∏ –≤–µ—Ä–∏—à—å, —á—Ç–æ ¬´–º—ã —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ!¬ª',
    '–í–æ—Å—Ç–æ—Ä–≥': '–°–≤–µ—Ä—Ö—Ä–∞–¥–æ—Å—Ç—å: —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤–∑–æ—à–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è',
    '–ò–Ω—Ç–µ—Ä–µ—Å': '–ù–æ—Å —á—É–µ—Ç –Ω–æ–≤–∏–∑–Ω—É, –º–æ–∑–≥ –∫—Ä–∏—á–∏—Ç ¬´–ø–æ–∫–∞–∂–∏ –µ—â—ë!¬ª',
    '–†–∞–¥–æ—Å—Ç—å': '–ü—Ä–æ—Å—Ç–æ–µ ¬´–º–Ω–µ —Ö–æ—Ä–æ—à–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å¬ª',
    '–°—á–∞—Å—Ç—å–µ': '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ ¬´–∂–∏–∑–Ω—å –≤ –ø–ª—é—Å¬ª',
    '–õ—ë–≥–∫–æ—Å—Ç—å': '–ù–µ—Ç –≥—Ä—É–∑–∞, –≤—Å—ë –ø–æ –ø–ª–µ—á—É',
    '–¢–µ–ø–ª–æ—Ç–∞': '–î—É—à–µ–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, —É—é—Ç',
    '–õ—é–±–æ–≤—å': '–ì–ª—É–±–æ–∫–∞—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∏ –∑–∞–±–æ—Ç–∞',
    '–û–±–æ–∂–∞–Ω–∏–µ': '–õ—é–±–æ–≤—å –Ω–∞ —Å—Ç–µ—Ä–æ–∏–¥–∞—Ö, —á—É—Ç—å –∏–¥–µ–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
    '–ü–µ—á–∞–ª—å': '–ü–æ—Ç–µ—Ä—è –∏–ª–∏ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å',
    '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ': '–ù–µ—Ö–≤–∞—Ç–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏',
    '–£–Ω—ã–Ω–∏–µ': '–í—Ä–µ–º–µ–Ω–Ω—ã–π —É–ø–∞–¥–æ–∫ —Å–∏–ª –∏ —Å–º—ã—Å–ª–∞',
    '–ü–æ—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å': '–ù–µ—è—Å–Ω–æ, –∫—É–¥–∞ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ',
    '–ë–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç—å': '–ú–∏—Ä –∫–∞–∂–µ—Ç—Å—è –∑–∞–ø–µ—Ä—Ç–æ–π –∫–æ—Ä–æ–±–∫–æ–π',
    '–ù–æ—Å—Ç–∞–ª—å–≥–∏—è': '–¢–æ—Å–∫–∞ –ø–æ —Ö–æ—Ä–æ—à–µ–º—É, –Ω–æ —É—à–µ–¥—à–µ–º—É',
    '–¢–æ—Å–∫–∞': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –ø–µ—á–∞–ª—å + –∂–µ–ª–∞–Ω–∏–µ ¬´—á–µ–≥–æ-—Ç–æ¬ª',
    '–≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—Å–∫–∞':
    '–ü–µ—á–∞–ª—å –æ —Å–º—ã—Å–ª–µ –∂–∏–∑–Ω–∏ –∏ —Å–≤–æ–µ–π –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏',
    '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—è': '–î–ª–∏–Ω–Ω–∞—è, –º—è–≥–∫–∞—è –≥—Ä—É—Å—Ç—å —Å –æ—Ç—Ç–µ–Ω–∫–æ–º –∏—Å–∫—É—Å—Å—Ç–≤–∞',
    '–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ': '–ß—Ç–æ-—Ç–æ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫',
    '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–µ—Ä—ã –≤ —Å–µ–±—è/—Å–∏—Ç—É–∞—Ü–∏—é',
    '–ü–∞–Ω–∏–∫–∞': '–û–ø–∞—Å–Ω–æ—Å—Ç—å –∫–∞–∂–µ—Ç—Å—è —Ç–æ—Ç–∞–ª—å–Ω–æ–π, –≤—Ä–µ–º–µ–Ω–∏ –Ω–æ–ª—å',
    '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ': '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —É–¥–∞—Ä—É/—Ä—ã–≤–∫—É',
    '–ü—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–∞':
    '–ú—ã—Å–ª–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—à—å —Ñ–∏–ª—å–º —É–∂–∞—Å–æ–≤ –ø—Ä–æ –±—É–¥—É—â–µ–µ',
    '–¢—Ä–µ–≤–æ–≥–∞': '–ú–∏–∫—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è + –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞',
    '–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å': '–ú–Ω–æ–≥–æ –∏–Ω—Ñ—ã, –º–∞–ª–æ —è—Å–Ω–æ—Å—Ç–∏',
    '–¢—Ä–µ–ø–µ—Ç': '–°–∏–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (–ø–ª—é—Å –∏–ª–∏ –º–∏–Ω—É—Å)',
    '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ': '–ß—Ç–æ-—Ç–æ –º–µ—à–∞–µ—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –æ—à–∏–±–∫—É',
    '–û–±–∏–¥–∞': '–ü–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∫ —Å–µ–±–µ',
    '–ó–∞–≤–∏—Å—Ç—å': '–£ –¥—Ä—É–≥–æ–≥–æ –µ—Å—Ç—å –∂–µ–ª–∞–µ–º–æ–µ, —É –º–µ–Ω—è ‚Äî –Ω–µ—Ç',
    '–ê–≥—Ä–µ—Å—Å–∏—è': '–ò–º–ø—É–ª—å—Å –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –∏–ª–∏ –∑–∞–≤–ª–∞–¥–µ—Ç—å',
    '–ù–µ–ø—Ä–∏—è–∑–Ω—å': '–°—Ç–∞–±–∏–ª—å–Ω–æ–µ ¬´–Ω–µ –º–æ—ë¬ª, –Ω–µ–ø—Ä–∏—è—Ç–∏–µ',
    '–§—Ä—É—Å—Ç—Ä–∞—Ü–∏—è': '–¶–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, —É—Å–∏–ª–∏—è –Ω–µ –¥–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
    '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
    '–ü—É—Å—Ç–æ—Ç–∞': '–≠–º–æ—Ü–∏–∏ –æ–±–Ω—É–ª–∏–ª–∏—Å—å –∏–ª–∏ —É—à–ª–∏ –≤ –ø–æ–¥–ø–æ–ª—å–µ',
    '–ó–∞–º–µ—Ä–∑–∞–Ω–∏–µ': '–°—Ç–æ–ø-–∫–∞–¥—Ä –æ—Ç —à–æ–∫–∞/—Å—Ç—Ä–∞—Ö–∞',
    '–û–Ω–µ–º–µ–Ω–∏–µ': '–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∏ –≤—ã–∫–ª—é—á–∏–ª–∞ —Å–µ–Ω—Å–æ—Ä—ã',
    '–¢—É–ø–∏–∫': '–ù–∏ –≤–ø–µ—Ä—ë–¥, –Ω–∏ –Ω–∞–∑–∞–¥',
    '–•—Ç–æ–Ω—å': '–≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—É—Å—Ç—ã–Ω—è + —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ –±–µ–∑–¥–Ω–æ',
    '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': '–ù–∏—á–µ–≥–æ –Ω–µ —à–∞—Ç–∞–µ—Ç –ª–æ–¥–∫—É',
    '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å': '–í–µ—Ä—é, —á—Ç–æ —Å–ø—Ä–∞–≤–ª—é—Å—å —Å –±—É—Ä—è–º–∏',
    '–ü—Ä–∏–Ω—è—Ç–∏–µ': '–°–æ–≥–ª–∞—à–∞—é—Å—å —Å —Ñ–∞–∫—Ç–æ–º –±–µ–∑ –±–æ—Ä—å–±—ã',
    '–î–æ–≤–µ—Ä–∏–µ': '–í–µ—Ä—é, —á—Ç–æ –º–µ–Ω—è –Ω–µ –ø–æ–¥—Å—Ç–∞–≤—è—Ç',
    '–†–µ–∑–æ–Ω–∞–Ω—Å': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º',
    '–í–∏–Ω–∞': '–ù–∞—Ä—É—à–∏–ª —Å–≤–æ–∏/—á—å–∏-—Ç–æ –ø—Ä–∞–≤–∏–ª–∞',
    '–°—Ç—ã–¥': '¬´–Ø –ø–ª–æ—Ö–æ–π/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π¬ª –Ω–∞ –≤–∏—Ç—Ä–∏–Ω–µ',
    '–°–º—É—â–µ–Ω–∏–µ': '–ù–µ–ª–æ–≤–∫–∏–π —Å–≤–µ—Ç –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –º–Ω–µ',
    '–ù–µ–ª–æ–≤–∫–æ—Å—Ç—å': '–°–æ—Ü-—Å–∏—Ç—É–∞—Ü–∏—è ¬´–∫–∞–∫ –±—ã –≤—ã–π—Ç–∏ –∫—Ä–∞—Å–∏–≤–æ?¬ª',
    '–ê–º–±–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å': '–î–≤–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
    '–£—è–∑–≤–∏–º–æ—Å—Ç—å': '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + —Ä–∏—Å–∫ –±—ã—Ç—å —Ä–∞–Ω–µ–Ω—ã–º',
    '–ö–∞—Ç–∞—Ä—Å–∏—Å': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ –∏ –æ—á–∏—â–µ–Ω–∏–µ',
  };

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (!_inited) {
      entry = ModalRoute.of(context)!.settings.arguments as EntryData;
      final parsed = int.tryParse(entry.mood);
            if (parsed != null) {
                    _rating = parsed.clamp(0, 10);
                    _moodCtrl = TextEditingController();
                  } else {
                    _rating = 5;
                    _moodCtrl = TextEditingController(text: entry.mood);
                  }
      _emoji = _emojiFromRating(_rating);
      _selected.addAll(entry.mainEmotions
          .split(RegExp(r'[;,\n]+'))
          .map((e) => e.trim())
          .where((e) => e.isNotEmpty));

      final regex =
      RegExp(r'(.*?)\s*[‚Äî-]\s*(\([^)]*\)|[^,]+)(?:,|\$)');
      for (final match in regex.allMatches(entry.influence)) {
        final emo = match.group(1)!.trim();
        var text = match.group(2)!.trim();
        if (text.startsWith('(') && text.endsWith(')')) {
          text = text.substring(1, text.length - 1).trim();
        }
        _influenceCtrls[emo] = TextEditingController(text: text);
      }
      for (final emo in _selected) {
        _influenceCtrls.putIfAbsent(emo, () => TextEditingController());
      }

      _inited = true;
      DraftService.currentDraft = entry;
      DraftService.saveDraft();
      QuickNoteService.getNotesForDate(entry.date).then((n) {
        setState(() => _notes = n);
      });
    }
  }

  Future<void> _save() async {
    final text = _moodCtrl.text.trim();
    entry.mood = text.isNotEmpty ? text : '$_rating';
    entry.mainEmotions = _selected.join(', ');
    entry.influence = _buildInfluenceString();
    DraftService.currentDraft = entry;
    await DraftService.saveDraft();
  }

  String _buildInfluenceString() {
    final parts = <String>[];
    for (final emo in _selected) {
      final text = _influenceCtrls[emo]?.text.trim() ?? '';
      if (text.isNotEmpty) parts.add('$emo ‚Äî $text');
    }
    return parts.join(', ');
  }

  void _toggleEmoji() {
    final idx = _emojiCycle.indexOf(_emoji);
    setState(() => _emoji = _emojiCycle[(idx + 1) % _emojiCycle.length]);
  }

  Future<void> _chooseEmoji() async {
    final selected = await showDialog<String>(
      context: context,
      builder: (ctx) => AlertDialog(
        content: Wrap(
          spacing: 8,
          children: _emojiOptions
              .map((e) => GestureDetector(
                    onTap: () => Navigator.pop(ctx, e),
                    child: Semantics(
                      label: 'emoji $e',
                      child: Text(e, style: const TextStyle(fontSize: 32)),
                    ),
                  ))
              .toList(),
        ),
      ),
    );
    if (selected != null) setState(() => _emoji = selected);
  }

  Future<void> _editDraftNote() async {
    final existing = _notes['mood']?.isNotEmpty == true ? _notes['mood']![0] : null;
    final ctrl = TextEditingController(text: existing?.text ?? '');
    final result = await showModalBottomSheet<String>(
      context: context,
      isScrollControlled: true,
      builder: (ctx) => Padding(
        padding: EdgeInsets.only(
          left: 16,
          right: 16,
          top: 16,
          bottom: MediaQuery.of(ctx).viewInsets.bottom + 16,
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: ctrl,
              minLines: 3,
              maxLines: null,
              autofocus: true,
              decoration: const InputDecoration(hintText: '–ß–µ—Ä–Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞'),
            ),
            const SizedBox(height: 12),
            FilledButton(
              onPressed: () => Navigator.pop(ctx, ctrl.text.trim()),
              child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
    if (result != null && result.trim().isNotEmpty) {
      if (existing != null) {
        await QuickNoteService.deleteNote(entry.date, 'mood', 0);
        _notes['mood']!.removeAt(0);
      }
      final note = await QuickNoteService.addNote(entry.date, 'mood', result.trim());
      setState(() => _notes.putIfAbsent('mood', () => []).insert(0, note));
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω')),
        );
      }
    }
  }

  Widget _influenceCard() {
    final theme = Theme.of(context);
    return Card(
      color: theme.colorScheme.surfaceVariant,
      elevation: 1,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('\uD83D\uDCAD –ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ',
                style: theme.textTheme.titleMedium),
            const SizedBox(height: 8),
            Column(
              children: [
                for (final emo in _selected)
                  Padding(
                    padding: const EdgeInsets.symmetric(vertical: 4),
                    child: Row(
                      children: [
                        Expanded(child: Text(emo)),
                        const SizedBox(width: 8),
                        Expanded(
                          flex: 2,
                          child: TextField(
                            controller: _influenceCtrls[emo],
                            decoration:
                            const InputDecoration(hintText: '–ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ'),
                            onChanged: (_) => _save(),
                          ),
                        ),
                      ],
                    ),
                  ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _showEmotionHint(String emo) async {
    final hint = _emotionHints[emo];
    if (hint == null) return;
    await showModalBottomSheet<void>(
      context: context,
      builder: (ctx) => Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(emo, style: Theme.of(ctx).textTheme.titleLarge),
            const SizedBox(height: 12),
            Text(hint, style: Theme.of(ctx).textTheme.bodyMedium),
            const SizedBox(height: 12),
            Align(
              alignment: Alignment.centerRight,
              child: FilledButton(
                onPressed: () => Navigator.pop(ctx),
                child: const Text('–ü–æ–Ω—è—Ç–Ω–æ'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _moodCtrl.dispose();
    for (final c in _influenceCtrls.values) {
      c.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = DarkDiaryTheme.theme;
    return Theme(
      data: theme,
      child: Scaffold(
        resizeToAvoidBottomInset: true,
        backgroundColor: DarkDiaryTheme.background,
        appBar: AppBar(
          title: const Text('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'),
          actions: [
            IconButton(
              icon: const Icon(Icons.note_add_outlined),
              tooltip: '–ß–µ—Ä–Ω–æ–≤–∏–∫',
              onPressed: _editDraftNote,
            ),
            const SizedBox(width: 8),
            const DiaryMenuButton(),
          ],
        ),
        body: SafeArea(
          bottom: false,
    child: KeyboardSafeContent(
    child: SingleChildScrollView(
    keyboardDismissBehavior:
    ScrollViewKeyboardDismissBehavior.onDrag,
    padding: const EdgeInsets.all(16),
    child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Center(child: Text('3/6', style: theme.textTheme.labelMedium)),
                const SizedBox(height: 8),
                Center(
                  child: GestureDetector(
                    onTap: _toggleEmoji,
                    onLongPress: _chooseEmoji,
                    child: Semantics(
                      label: 'mood emoji $_emoji',
                      child: CircleAvatar(
                        radius: 48,
                        backgroundColor: theme.colorScheme.surfaceVariant,
                        child: Text(_emoji, style: const TextStyle(fontSize: 40)),
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                SliderTheme(
                  data: SliderTheme.of(context).copyWith(
                    trackHeight: 4,
                    thumbShape: const RoundSliderThumbShape(enabledThumbRadius: 12),
                  ),
                  child: Slider(
                    value: _rating.toDouble(),
                    min: 0,
                    max: 10,
                    divisions: 10,
                    label: '$_rating',
                    onChanged: (v) async {
                      setState(() {
                                              _rating = v.round();
                                              _emoji = _emojiFromRating(_rating);
                                            });
                      await _save();
                    },
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _ratingLabels[_rating]!,
                  style: theme.textTheme.bodyLarge!.copyWith(
                                      color: const Color(0xFFE6E1E5),
                                    ),
                ),
                const SizedBox(height: 8),
                TextField(
                  controller: _moodCtrl,
                  decoration: InputDecoration(
                    hintText: '–°–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
                    suffixIcon: IconButton(
                      icon: const Icon(Icons.info_outline),
                      tooltip: '–ü–æ–¥—Å–∫–∞–∑–∫–∞',
                      onPressed: () {
                        showDialog(
                          context: context,
                          builder: (ctx) => const AlertDialog(
                              content: Text('–í—ã–±–µ—Ä–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ—Ü–∏–∏'),
                          ),
                        );
                      },
                    ),
                  ),
                  onChanged: (_) async => await _save(),
                ),
                const SizedBox(height: 24),
                if (_selected.isEmpty)
                  MaterialBanner(
                    content: const Text(
                        '–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É'),
                    actions: const [SizedBox.shrink()],
                  ),
                const SizedBox(height: 8),
                ..._emotionCategories.entries
                    .toList()
                    .asMap()
                    .entries
                    .map((entryCat) {
                  final index = entryCat.key;
                  final cat = entryCat.value.key;
                  final emotions = entryCat.value.value;
                  final expanded = _expanded == index;
                  final selectedCount =
                      emotions.where(_selected.contains).length;
                  return Card(
                    color: const Color(0xFF211C2A),
                    elevation: 1,
                    child: ExpansionTile(
                      key: ValueKey('tile_${index}_${_expanded ?? ""}'),
                      tilePadding: const EdgeInsets.symmetric(horizontal: 16),
                      childrenPadding: const EdgeInsets.all(24),
                      collapsedShape: const RoundedRectangleBorder(),
                      shape: const RoundedRectangleBorder(),
                      initiallyExpanded: expanded,
                      trailing: RotationTransition(
                        turns: AlwaysStoppedAnimation(expanded ? 0.5 : 0),
                        child: const Icon(Icons.expand_more),
                      ),
                      onExpansionChanged: (v) =>
                          setState(() => _expanded = v ? index : null),
                      title: Text(
                        selectedCount > 0 ? '$cat ($selectedCount)' : cat,
                        style: theme.textTheme.bodyLarge!
                            .copyWith(fontWeight: FontWeight.w600),
                      ),
                      children: [
                        Wrap(
                          spacing: 8,
                          runSpacing: 8,
                          children: [
    for (final emo in emotions)
    GestureDetector(
    onLongPress: () => _showEmotionHint(emo),
    child: FilterChip(
    label: Text(emo),
    selected: _selected.contains(emo),
    selectedColor: const Color(0xFF4B3B7F),
    checkmarkColor: const Color(0xFFE6E1E5),
      onSelected: (v) async {
        setState(() {
          if (v) {
            _selected.add(emo);
            _influenceCtrls.putIfAbsent(
                emo, () => TextEditingController());
          } else {
            _selected.remove(emo);
            _influenceCtrls.remove(emo)?.dispose();
          }
        });
        await _save();
      },
                  ),
                                ),
                          ],
                        ),
                      ],
                    ),
                  );
                }),
                if (_selected.isNotEmpty) ...[
                  const SizedBox(height: 16),
                  _influenceCard(),
                ],
                const SizedBox(height: 16),
              ],
            ),
          ),
        ),
        bottomNavigationBar: SafeArea(
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: theme.colorScheme.surface,
              boxShadow: kElevationToShadow[2],
            ),
            child: Row(
              children: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('‚Üê –ù–∞–∑–∞–¥'),
                ),
                const Spacer(),
                FilledButton(
                  onPressed: () async {
                    await _save();
                    if (!mounted) return;
                    Navigator.pushNamed(
                      context,
                      AchievementsScreenNew.routeName,
                      arguments: entry,
                    );
                  },
                  child: const Text('–î–∞–ª–µ–µ: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}