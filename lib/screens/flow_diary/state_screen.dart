import 'package:flutter/material.dart';
import '../../models/entry_data.dart';
import '../../services/draft_service.dart';
import '../../main.dart';
import 'emotion_screen.dart';
import '../history_diary/entries_screen.dart';

enum _DateMenu { entries, toggleTheme }

class StateScreen extends StatefulWidget {
  static const routeName = '/state';
  const StateScreen({Key? key}) : super(key: key);

  @override
  State<StateScreen> createState() => _StateScreenState();
}

class _StateScreenState extends State<StateScreen> {
  late EntryData entry;
  late TextEditingController bedCtrl;
  late TextEditingController wakeCtrl;
  late TextEditingController durationCtrl;
  late TextEditingController stepsCtrl;
  late TextEditingController activityCtrl;

  int _energy = 5;
  late String _energyDesc;
  static const _energyLabels = <int, String>{
    0: '–ü–æ–ª–Ω—ã–π —É–ø–∞–¥–æ–∫. –ï–ª–µ –∂–∏–≤.',
    1: '–û—á–µ–Ω—å —Å–ª–∞–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –•–æ—Ç–µ–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ª–µ–∂–∞—Ç—å.',
    2: '–°–∏–ª—å–Ω–æ –≤—è–ª—ã–π, –±–µ–∑ —Å–∏–ª.',
    3: '–£—Å—Ç–∞–ª–æ—Å—Ç—å, –º–∞–ª–æ —Ä–µ—Å—É—Ä—Å–æ–≤.',
    4: '–ß—É—Ç—å –Ω–∏–∂–µ –Ω–æ—Ä–º—ã, –≤—è–ª–æ—Å—Ç—å.',
    5: '–°—Ä–µ–¥–Ω–µ. –ù–∏ –ø–ª–æ—Ö–æ, –Ω–∏ –±–æ–¥—Ä–æ.',
    6: '–í —Ü–µ–ª–æ–º –Ω–æ—Ä–º, –Ω–æ –Ω–µ –Ω–∞ –ø–∏–∫–µ.',
    7: '–ë–æ–¥—Ä–æ—Å—Ç—å, –¥–≤–∏–≥–∞—Ç—å—Å—è –ø—Ä–∏—è—Ç–Ω–æ.',
    8: '–í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è, –ª–µ–≥–∫–æ –¥–≤–∏–≥–∞—Ç—å—Å—è.',
    9: '–ü–æ—á—Ç–∏ –º–∞–∫—Å–∏–º—É–º. –•–æ—á–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å.',
    10: '–ü–∏–∫ —Ñ–æ—Ä–º—ã. –≠–Ω–µ—Ä–≥–∏—è –ø—Ä–µ—Ç. –°—É–ø–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–µ.',
  };

  bool _init = false;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (!_init) {
      entry =
          ModalRoute.of(context)!.settings.arguments as EntryData;
      bedCtrl =
          TextEditingController(text: entry.bedTime);
      wakeCtrl =
          TextEditingController(text: entry.wakeTime);
      durationCtrl =
          TextEditingController(text: entry.sleepDuration);
      stepsCtrl =
          TextEditingController(text: entry.steps);
      activityCtrl =
          TextEditingController(text: entry.activity);

      _energy = int.tryParse(entry.energy) ?? 5;
      _energyDesc = _energyLabels[_energy]!;
      // Ensure energy is stored even if the user does not move the slider.
      if (entry.energy.trim().isEmpty) {
        entry.energy = '$_energy';
      }
      DraftService.currentDraft = entry;
      DraftService.saveDraft();

      _init = true;
    }
  }

  @override
  void dispose() {
    bedCtrl.dispose();
    wakeCtrl.dispose();
    durationCtrl.dispose();
    stepsCtrl.dispose();
    activityCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext ctx) {
    final appState = MyApp.of(ctx);

    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title:
            const Text('üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ', style: TextStyle(fontSize: 16)),
        actions: [
          PopupMenuButton<_DateMenu>(
            onSelected: (item) {
              switch (item) {
                case _DateMenu.entries:
                  Navigator.pushNamed(context, EntriesScreen.routeName);
                  break;
                case _DateMenu.toggleTheme:
                  final appState = MyApp.of(context);
                  appState.toggleTheme(!appState.isDark);
                  break;  
              }
            },
            itemBuilder: (_) => [
              const PopupMenuItem(
                value: _DateMenu.entries,
                child: ListTile(
                  leading: Icon(Icons.list),
                  title: Text('–ú–æ–∏ –∑–∞–ø–∏—Å–∏'), 
                ),
              ),
            PopupMenuItem(
              value: _DateMenu.toggleTheme,
              child: ListTile(
                leading: Icon( 
                  MyApp.of(context).isDark
                    ? Icons.sunny
                    : Icons.nightlight_round
                ),
                title: Text( 
                  MyApp.of(context).isDark  
                    ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞'
                    : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞'
                ),
              ),
            ),          
          ],
        ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: bedCtrl,
              decoration: const InputDecoration(labelText: '‚è∞ –õ—ë–≥ –≤:'),
              onChanged: (v) async {
                entry.bedTime = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const SizedBox(height: 8),
            TextField(
              controller: wakeCtrl,
              decoration:
                  const InputDecoration(labelText: '‚è∞ –ü—Ä–æ—Å–Ω—É–ª—Å—è –≤:'),
              onChanged: (v) async {
                entry.wakeTime = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const SizedBox(height: 8),
            TextField(
              controller: durationCtrl,
              decoration:
                  const InputDecoration(labelText: '‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è —Å–Ω–∞'),
              onChanged: (v) async {
                entry.sleepDuration = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const SizedBox(height: 16),
            TextField(
              controller: stepsCtrl,
              decoration: const InputDecoration(
                labelText: 'üö∂ –®–∞–≥–∏: —á–∏—Å–ª–æ',
              ),
              keyboardType: TextInputType.number,
              onChanged: (v) async {
                entry.steps = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const SizedBox(height: 8),
            TextField(
              controller: activityCtrl,
              decoration: InputDecoration(
                labelText: 'üî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                suffixIcon: Tooltip(
                  message:
                      '–ü—Ä–∏–º–µ—Ä: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 40 –º–∏–Ω, –ø—Ä–æ–≥—É–ª–∫–∞ 30 –º–∏–Ω.',
                  child: const Icon(Icons.info_outline),
                ),
              ),
              onChanged: (v) async {
                entry.activity = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const SizedBox(height: 16),
            Text('‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: $_energy',
                style: Theme.of(ctx).textTheme.titleMedium),
            Slider(
              value: _energy.toDouble(),
              min: 0,
              max: 10,
              divisions: 10,
              onChanged: (v) async {
                _energy = v.toInt();
                entry.energy = '$_energy';
                _energyDesc = _energyLabels[_energy]!;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
                setState(() {});
              },
            ),
            const SizedBox(height: 8),
            Text(_energyDesc,
                style: Theme.of(ctx).textTheme.bodyMedium,
                textAlign: TextAlign.center),
            const Spacer(),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                TextButton(
                  onPressed: () => Navigator.pop(ctx),
                  child: const Text('‚Üê –ù–∞–∑–∞–¥'),
                ),
                ElevatedButton(
                  onPressed: () async {
                    DraftService.currentDraft = entry;
                    await DraftService.saveDraft();
                    Navigator.pushNamed(
                      ctx,
                      EmotionScreen.routeName,
                      arguments: entry,
                    );
                  },
                  child: const Text('‚Üí –î–∞–ª–µ–µ: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
