import 'package:flutter/material.dart';
import '../../models/entry_data.dart';
import '../../services/draft_service.dart';
import '../../main.dart';
import 'achievements_screen.dart';
import '../history_diary/entries_screen.dart';

enum _DateMenu { entries, toggleTheme }

class EmotionScreen extends StatefulWidget {
  static const routeName = '/emotion';
  const EmotionScreen({Key? key}) : super(key: key);

  @override
  State<EmotionScreen> createState() => _EmotionScreenState();
}

class _EmotionScreenState extends State<EmotionScreen> {
  late EntryData entry;
  late TextEditingController moodCtrl;
  late TextEditingController mainEmotionsCtrl;
  late TextEditingController influenceCtrl;
  bool _inited = false;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (!_inited) {
      entry =
          ModalRoute.of(context)!.settings.arguments as EntryData;
      moodCtrl = TextEditingController(text: entry.mood);
      mainEmotionsCtrl =
          TextEditingController(text: entry.mainEmotions);
      influenceCtrl =
          TextEditingController(text: entry.influence);

      DraftService.currentDraft = entry;
      DraftService.saveDraft();

      _inited = true;
    }
  }

  @override
  void dispose() {
    moodCtrl.dispose();
    mainEmotionsCtrl.dispose();
    influenceCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext ctx) {
    final appState = MyApp.of(ctx);

    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title:
            const Text('üîπ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', style: TextStyle(fontSize: 16)),
        actions: [
          PopupMenuButton<_DateMenu>(
            onSelected: (item) {
              switch (item) {
                case _DateMenu.entries:
                  Navigator.pushNamed(context, EntriesScreen.routeName);
                  break;
                case _DateMenu.toggleTheme:
                  final appState = MyApp.of(context);
                  appState.toggleTheme(!appState.isDark);
                  break;  
              }
            },
            itemBuilder: (_) => [
              const PopupMenuItem(
                value: _DateMenu.entries,
                child: ListTile(
                  leading: Icon(Icons.list),
                  title: Text('–ú–æ–∏ –∑–∞–ø–∏—Å–∏'), 
                ),
              ),
            PopupMenuItem(
              value: _DateMenu.toggleTheme,
              child: ListTile(
                leading: Icon( 
                  MyApp.of(context).isDark
                    ? Icons.sunny
                    : Icons.nightlight_round
                ),
                title: Text( 
                  MyApp.of(context).isDark  
                    ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞'
                    : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞'
                ),
              ),
            ),          
          ],
        ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: moodCtrl,
              decoration: InputDecoration(
                labelText: 'üòä –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
                suffixIcon: Tooltip(
                  message:
                      '–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å".',
                  child: const Icon(Icons.info_outline),
                ),
              ),
              onChanged: (v) async {
                entry.mood = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const SizedBox(height: 8),
            TextField(
              controller: mainEmotionsCtrl,
              decoration: InputDecoration(
                labelText: 'üé≠ –ì–ª–∞–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏',
                suffixIcon: Tooltip(
                  message:
                      '1‚Äì3 —ç–º–æ—Ü–∏–∏: —Ä–∞–¥–æ—Å—Ç—å, —Ç—Ä–µ–≤–æ–≥–∞ –∏ —Ç.–¥.',
                  child: const Icon(Icons.info_outline),
                ),
              ),
              onChanged: (v) async {
                entry.mainEmotions = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const SizedBox(height: 8),
            TextField(
              controller: influenceCtrl,
              decoration: InputDecoration(
                labelText: 'üí≠ –ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ',
                suffixIcon: Tooltip(
                  message:
                      '–ù–∞–ø—Ä–∏–º–µ—Ä: "–º–∞–ª–æ –æ–±—â–µ–Ω–∏—è, —Ç—Ä–µ–≤–æ–≥–∞ –∑–∞ –±—É–¥—É—â–µ–µ".',
                  child: const Icon(Icons.info_outline),
                ),
              ),
              onChanged: (v) async {
                entry.influence = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const Spacer(),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                TextButton(
                  onPressed: () => Navigator.pop(ctx),
                  child: const Text('‚Üê –ù–∞–∑–∞–¥'),
                ),
                ElevatedButton(
                  onPressed: () async {
                    DraftService.currentDraft = entry;
                    await DraftService.saveDraft();
                    Navigator.pushNamed(
                      ctx,
                      AchievementsScreen.routeName,
                      arguments: entry,
                    );
                  },
                  child: const Text('‚Üí –î–∞–ª–µ–µ: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
