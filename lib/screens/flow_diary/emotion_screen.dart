import 'package:flutter/material.dart';
import '../../models/entry_data.dart';
import '../../services/draft_service.dart';
import '../../main.dart';
import 'achievements_screen.dart';
import '../history_diary/entries_screen.dart';

enum _DateMenu { entries, toggleTheme }

class EmotionScreen extends StatefulWidget {
  static const routeName = '/emotion';
  const EmotionScreen({Key? key}) : super(key: key);

  @override
  State<EmotionScreen> createState() => _EmotionScreenState();
}

class _EmotionScreenState extends State<EmotionScreen> {
  late EntryData entry;
  late TextEditingController moodCtrl;
  late TextEditingController influenceCtrl;
  final Set<String> _selectedEmotions = <String>{};
  int? _expandedCategoryIndex;

  static const Map<String, List<String>> _emotionCategories = {
    'üòÑ –†–∞–¥–æ—Å—Ç—å': [
      '–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ',
      '–í–æ—Å—Ç–æ—Ä–≥',
      '–ò–Ω—Ç–µ—Ä–µ—Å',
      '–°—á–∞—Å—Ç—å–µ',
      '–õ—ë–≥–∫–æ—Å—Ç—å',
      '–¢–µ–ø–ª–æ—Ç–∞',
      '–õ—é–±–æ–≤—å',
      '–û–±–æ–∂–∞–Ω–∏–µ',
    ],
    'üòî –ì—Ä—É—Å—Ç—å': [
      '–ü–µ—á–∞–ª—å',
      '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ',
      '–£–Ω—ã–Ω–∏–µ',
      '–ü–æ—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å',
      '–ë–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç—å',
      '–ù–æ—Å—Ç–∞–ª—å–≥–∏—è',
      '–¢–æ—Å–∫–∞',
      '–≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—Å–∫–∞',
      '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—è',
    ],
    'üò∞ –¢—Ä–µ–≤–æ–≥–∞': [
      '–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ',
      '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
      '–ü–∞–Ω–∏–∫–∞',
      '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
      '–ü—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–∞',
      '–¢—Ä–µ–≤–æ–≥–∞',
      '–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å',
      '–¢—Ä–µ–ø–µ—Ç',
    ],
    'üò° –ó–ª–æ—Å—Ç—å': [
      '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ',
      '–û–±–∏–¥–∞',
      '–ó–∞–≤–∏—Å—Ç—å',
      '–ê–≥—Ä–µ—Å—Å–∏—è',
      '–ù–µ–ø—Ä–∏—è–∑–Ω—å',
      '–§—Ä—É—Å—Ç—Ä–∞—Ü–∏—è',
      '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ',
    ],
    'üò∂ –û—Ü–µ–ø–µ–Ω–µ–Ω–∏–µ': [
      '–ü—É—Å—Ç–æ—Ç–∞',
      '–ó–∞–º–µ—Ä–∑–∞–Ω–∏–µ',
      '–û–Ω–µ–º–µ–Ω–∏–µ',
      '–¢—É–ø–∏–∫',
      '–•—Ç–æ–Ω—å',
    ],
    'ü§ç –ü—Ä–∏–Ω—è—Ç–∏–µ': [
      '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
      '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å',
      '–ü—Ä–∏–Ω—è—Ç–∏–µ',
      '–î–æ–≤–µ—Ä–∏–µ',
      '–†–µ–∑–æ–Ω–∞–Ω—Å',
    ],
    'üí≠ –°–ª–æ–∂–Ω—ã–µ/—Å–º–µ—à–∞–Ω–Ω—ã–µ': [
      '–í–∏–Ω–∞',
      '–°—Ç—ã–¥',
      '–°–º—É—â–µ–Ω–∏–µ',
      '–ù–µ–ª–æ–≤–∫–æ—Å—Ç—å',
      '–ê–º–±–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å',
      '–£—è–∑–≤–∏–º–æ—Å—Ç—å',
      '–ö–∞—Ç–∞—Ä—Å–∏—Å',
    ],
  };

  static const Map<String, String> _emotionHints = {
    '–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ': '–ß—É–≤—Å—Ç–≤–æ –ø–æ–¥—ä—ë–º–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏.',
    '–í–æ—Å—Ç–æ—Ä–≥': '–°–∏–ª—å–Ω–∞—è —Ä–∞–¥–æ—Å—Ç—å –∏ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ.',
    '–ò–Ω—Ç–µ—Ä–µ—Å': '–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ, –∂–µ–ª–∞–Ω–∏–µ —É–∑–Ω–∞—Ç—å.',
    '–°—á–∞—Å—Ç—å–µ': '–ì–ª—É–±–æ–∫–æ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ.',
    '–õ—ë–≥–∫–æ—Å—Ç—å': '–°–≤–æ–±–æ–¥–∞ –æ—Ç —Ç—Ä–µ–≤–æ–≥.',
    '–¢–µ–ø–ª–æ—Ç–∞': '–£—é—Ç –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.',
    '–õ—é–±–æ–≤—å': '–°–ª–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è.',
    '–û–±–æ–∂–∞–Ω–∏–µ': '–ò–¥–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç—ë–ø–ª–æ–µ —á—É–≤—Å—Ç–≤–æ –∫ –∫–æ–º—É-—Ç–æ.',
    '–ü–µ—á–∞–ª—å': '–ú—è–≥–∫–∞—è –≥—Ä—É—Å—Ç—å.',
    '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ': '–ß—É–≤—Å—Ç–≤–æ –∏–∑–æ–ª—è—Ü–∏–∏.',
    '–£–Ω—ã–Ω–∏–µ': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑—Ä–∞–¥–æ—Å—Ç–∏.',
    '–ü–æ—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å': '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.',
    '–ë–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç—å': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞–¥–µ–∂–¥—ã.',
    '–ù–æ—Å—Ç–∞–ª—å–≥–∏—è': '–¢–µ–ø–ª–∞—è –ø–∞–º—è—Ç—å –æ —á—ë–º-—Ç–æ —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–º.',
    '–¢–æ—Å–∫–∞': '–¢–æ–º–ª–µ–Ω–∏–µ –ø–æ –Ω–µ—è—Å–Ω–æ–º—É –∏–ª–∏ —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–º—É.',
    '–≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—Å–∫–∞': '–ß—É–≤—Å—Ç–≤–æ –ø—É—Å—Ç–æ—Ç—ã –∏ —Å–º—ã—Å–ª–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.',
    '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—è': '–≠—Å—Ç–µ—Ç–∏—á–Ω–∞—è, —Ç—è–Ω—É—â–∞—è –≥—Ä—É—Å—Ç—å.',
    '–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ': '–°–º—É—â—ë–Ω–Ω–æ—Å—Ç—å –∏ –≤–æ–ª–Ω–µ–Ω–∏–µ.',
    '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': '–°–æ–º–Ω–µ–Ω–∏—è –∏ –∫–æ–ª–µ–±–∞–Ω–∏—è.',
    '–ü–∞–Ω–∏–∫–∞': '–û—Å—Ç—Ä–∞—è —Ç—Ä–µ–≤–æ–≥–∞.',
    '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ': '–°–∏–ª—å–Ω–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–∂–∞—Ç–∏–µ.',
    '–ü—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–∞': '–û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–æ—Ö–æ–≥–æ.',
    '–¢—Ä–µ–≤–æ–≥–∞': '–û–±—â–µ–µ –æ—â—É—â–µ–Ω–∏–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞.',
    '–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å': '–ü–æ—Ç–µ—Ä—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤.',
    '–¢—Ä–µ–ø–µ—Ç': '–û—â—É—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —á–µ–º-—Ç–æ –±–æ–ª—å—à–∏–º –∏–ª–∏ —Å–∏–ª—å–Ω—ã–º.',
    '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ': '–ú–µ–ª–∫–∞—è –∑–ª–æ—Å—Ç—å.',
    '–û–±–∏–¥–∞': '–ß—É–≤—Å—Ç–≤–æ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏.',
    '–ó–∞–≤–∏—Å—Ç—å': '–ß—É–∂–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç –±–æ–ª—å –∏–∑-–∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.',
    '–ê–≥—Ä–µ—Å—Å–∏—è': '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–∞–ø–∞–¥–∞—Ç—å.',
    '–ù–µ–ø—Ä–∏—è–∑–Ω—å': '–û—Ç—Ç–∞–ª–∫–∏–≤–∞—é—â–µ–µ —á—É–≤—Å—Ç–≤–æ.',
    '–§—Ä—É—Å—Ç—Ä–∞—Ü–∏—è': '–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è.',
    '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ': '–û—Ç—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.',
    '–ü—É—Å—Ç–æ—Ç–∞': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–º–æ—Ü–∏–π.',
    '–ó–∞–º–µ—Ä–∑–∞–Ω–∏–µ': '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è.',
    '–û–Ω–µ–º–µ–Ω–∏–µ': '–û—â—É—â–µ–Ω–∏–µ –æ—Ü–µ–ø–µ–Ω–µ–Ω–∏—è.',
    '–¢—É–ø–∏–∫': '–ù–µ—Ç –≤–∏–¥–∏–º–æ–≥–æ –≤—ã—Ö–æ–¥–∞.',
    '–•—Ç–æ–Ω—å': '–ì–ª—É–±–∏–Ω–Ω–æ–µ, –∞—Ä—Ö–∞–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ.',
    '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': '–†–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.',
    '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å': '–ß—É–≤—Å—Ç–≤–æ –æ–ø–æ—Ä—ã.',
    '–ü—Ä–∏–Ω—è—Ç–∏–µ': '–°–æ–≥–ª–∞—Å–∏–µ —Å —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å.',
    '–î–æ–≤–µ—Ä–∏–µ': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥—Ä—É–≥–æ–º.',
    '–†–µ–∑–æ–Ω–∞–Ω—Å': '–û—Ç—Ä–∞–∂–µ–Ω–∏–µ —á—É–∂–∏—Ö —ç–º–æ—Ü–∏–π –≤ —Å–µ–±–µ.',
    '–í–∏–Ω–∞': '–û—â—É—â–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã –ø—Ä–∏—á–∏–Ω–∏–ª –≤—Ä–µ–¥.',
    '–°—Ç—ã–¥': '–ß—É–≤—Å—Ç–≤–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.',
    '–°–º—É—â–µ–Ω–∏–µ': '–î–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –æ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∫ —Å–µ–±–µ.',
    '–ù–µ–ª–æ–≤–∫–æ—Å—Ç—å': '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö.',
    '–ê–º–±–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å': '–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —ç–º–æ—Ü–∏–∏.',
    '–£—è–∑–≤–∏–º–æ—Å—Ç—å': '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–∫–∞ –±—ã—Ç—å —Ä–∞–Ω–∏–º—ã–º.',
    '–ö–∞—Ç–∞—Ä—Å–∏—Å': '–û—á–∏—â–∞—é—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ.',
  };
  bool _inited = false;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (!_inited) {
      entry =
          ModalRoute.of(context)!.settings.arguments as EntryData;
      moodCtrl = TextEditingController(text: entry.mood);
      influenceCtrl =
          TextEditingController(text: entry.influence);

      _selectedEmotions.addAll(
        entry.mainEmotions
            .split(RegExp(r'[;,\n]+'))
            .map((e) => e.trim())
            .where((e) => e.isNotEmpty),
      );

      DraftService.currentDraft = entry;
      DraftService.saveDraft();

      _inited = true;
    }
  }

  @override
  void dispose() {
    moodCtrl.dispose();
    influenceCtrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext ctx) {
    final appState = MyApp.of(ctx);

    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title:
            const Text('üîπ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', style: TextStyle(fontSize: 16)),
        actions: [
          PopupMenuButton<_DateMenu>(
            onSelected: (item) {
              switch (item) {
                case _DateMenu.entries:
                  Navigator.pushNamed(context, EntriesScreen.routeName);
                  break;
                case _DateMenu.toggleTheme:
                  final appState = MyApp.of(context);
                  appState.toggleTheme(!appState.isDark);
                  break;  
              }
            },
            itemBuilder: (_) => [
              const PopupMenuItem(
                value: _DateMenu.entries,
                child: ListTile(
                  leading: Icon(Icons.list),
                  title: Text('–ú–æ–∏ –∑–∞–ø–∏—Å–∏'), 
                ),
              ),
            PopupMenuItem(
              value: _DateMenu.toggleTheme,
              child: ListTile(
                leading: Icon( 
                  MyApp.of(context).isDark
                    ? Icons.sunny
                    : Icons.nightlight_round
                ),
                title: Text( 
                  MyApp.of(context).isDark  
                    ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞'
                    : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞'
                ),
              ),
            ),          
          ],
        ),
        ],
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              TextField(
                controller: moodCtrl,
                decoration: InputDecoration(
                  labelText: 'üòä –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
                    suffixIcon: Tooltip(
                      message:
                        '–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å".',
                      child: const Icon(Icons.info_outline),
                    ),
                ),
                onChanged: (v) async {
                  entry.mood = v;
                  DraftService.currentDraft = entry;
                  await DraftService.saveDraft();
                },
              ),
              const SizedBox(height: 8),
              Align(
                alignment: Alignment.centerLeft,
                child: Text('üé≠ –ì–ª–∞–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏',
                style: Theme.of(ctx).textTheme.titleMedium),
              ),
              const SizedBox(height: 4),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: _emotionCategories.entries
                    .toList()
                    .asMap()
                    .entries
                    .map((categoryEntry) {
                  final index = categoryEntry.key;
                  final cat = categoryEntry.value;
                  final emotions = cat.value;
                  final selectedCount = emotions.where(_selectedEmotions.contains).length;
                  return ExpansionTile(
                    key: PageStorageKey(cat.key),
                    initiallyExpanded: _expandedCategoryIndex == index,
                    onExpansionChanged: (expanded) {
                      setState(() {
                        _expandedCategoryIndex = expanded ? index : null;
                      });
                    },
                    title: Text(selectedCount > 0 ? '${cat.key} ($selectedCount)' : cat.key),
                    children: [
                    Wrap(
                    spacing: 8,
                    children: emotions.map((emotion) {
                      final selected = _selectedEmotions.contains(emotion);
                      return Tooltip(
                        message: _emotionHints[emotion] ?? '',
                        child: FilterChip(
                          label: Text(emotion),
                          selected: selected,
                          onSelected: (v) async {
                            setState(() {
                              if (v) {
                                _selectedEmotions.add(emotion);
                              } else {
                                _selectedEmotions.remove(emotion);
                              }
                              entry.mainEmotions = _selectedEmotions.join(', ');
                            });
                            DraftService.currentDraft = entry;
                            await DraftService.saveDraft();
                          },
                        ),
                      );
                    }).toList(),
                      ),
                      const SizedBox(height: 8),
                    ],
                  );
                }).toList(),
              ),
            const SizedBox(height: 8),
            TextField(
              controller: influenceCtrl,
              decoration: InputDecoration(
                labelText: 'üí≠ –ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ',
                suffixIcon: Tooltip(
                  message:
                      '–ù–∞–ø—Ä–∏–º–µ—Ä: "–º–∞–ª–æ –æ–±—â–µ–Ω–∏—è, —Ç—Ä–µ–≤–æ–≥–∞ –∑–∞ –±—É–¥—É—â–µ–µ".',
                  child: const Icon(Icons.info_outline),
                ),
              ),
              onChanged: (v) async {
                entry.influence = v;
                DraftService.currentDraft = entry;
                await DraftService.saveDraft();
              },
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                TextButton(
                  onPressed: () => Navigator.pop(ctx),
                  child: const Text('‚Üê –ù–∞–∑–∞–¥'),
                ),
                ElevatedButton(
                  onPressed: () async {
                    DraftService.currentDraft = entry;
                    await DraftService.saveDraft();
                    Navigator.pushNamed(
                      ctx,
                      AchievementsScreen.routeName,
                      arguments: entry,
                    );
                  },
                  child: const Text('‚Üí –î–∞–ª–µ–µ: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'),
                ),
              ],
            ),
          ],
        ),
      ),
      ),
    );
  }
}
